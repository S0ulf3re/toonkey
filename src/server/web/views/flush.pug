doctype html

html
	#msg
	script.
		const msg = document.getElementById('msg');

		const promises = [];

		try {
			localStorage.clear();
			message('localStorage cleared');

			promises.push(new Promise((res, rej) => {
				const delDB = indexedDB.deleteDatabase('MisskeyClient');
				delDB.onsuccess = () => {
					message('indexedDB MisskeyClient cleared');
					res();
				};
				delDB.onerror = () => {
					message(`indexedDB MisskeyClient clearing failed`);
					rej();
				};
			}));

			promises.push(new Promise((res, rej) => {
				const delDB = indexedDB.deleteDatabase('vuex');
				delDB.onsuccess = () => {
					message('indexedDB vuex cleared');
					res();
				};
				delDB.onerror = () => {
					message(`indexedDB vuex clearing failed`);
					rej();
				};
			}));

			if (navigator.serviceWorker && navigator.serviceWorker.controller) {
				navigator.serviceWorker.controller.postMessage('clear');
				promises.push(navigator.serviceWorker.getRegistrations()
					.then(registrations => {
						return Promise.all(registrations.map(registration => registration.unregister()));
					}));
			}

			Promise.all(promises).then(() => {
				message('Success Flush! Please reopen Misskey.\n成功しました。Misskeyを開き直してください。');
			}, e => {
				message(`${e}¥n¥nFlush Failed. Please reopen Misskey.\n失敗しました。Misskeyを開き直してください。`);
			})
		} catch (e) {
			console.error(e);
			message(`${e}¥n¥nFlush Failed. Please reopen Misskey.\n失敗しました。Misskeyを開き直してください。`);
			setTimeout(() => {
				location = '/';
			}, 10000)
		}

		function message(text) {
			msg.insertAdjacentHTML('beforeend', `<p>[${(new Date()).toString()}] ${text.replace(/¥n/g,'<br>')}</p>`)
		}
